
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserRole(userId) {
      if (userId == null || userId == "") {
        return null;
      }
      // Explicitly use '(default)' for the database ID
      let userDocument = get(/databases/(default)/documents/users/$(userId));
      if (userDocument == null || userDocument.data == null || !('role' in userDocument.data)) {
        return null;
      }
      return userDocument.data.role;
    }

    function isAdmin(userId) {
      let role = getUserRole(userId);
      return role != null && role == 'Admin';
    }

    function isTeacher(userId) {
      let role = getUserRole(userId);
      return role != null && role == 'Teacher';
    }

    function isStudent(userId) {
      let role = getUserRole(userId);
      return role != null && role == 'Student';
    }

    // Rule to check if the requester is the owner of a student document
    // (assuming student document has an 'authUid' field storing the student's Firebase Auth UID)
    function isOwnerOfStudentData(studentDocId) {
      let studentDoc = get(/databases/(default)/documents/students/$(studentDocId));
      return studentDoc != null && studentDoc.data != null && ('authUid'in studentDoc.data) && studentDoc.data.authUid == request.auth.uid;
    }

     // Rule to check if the requester is the owner of a teacher document
    function isOwnerOfTeacherData(teacherDocId) {
        // Teachers manage their own profile, so check their own UID against the document ID
        return request.auth.uid == teacherDocId;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin(request.auth.uid) || isTeacher(request.auth.uid));
      allow create: if isAuthenticated() && isAdmin(request.auth.uid); // Only Admins can create new user role documents
      allow update: if isAuthenticated() && (isAdmin(request.auth.uid) || (request.auth.uid == userId)); // Admins or the user themselves can update
      allow delete: if isAuthenticated() && isAdmin(request.auth.uid); // Only Admins can delete user role documents
    }

    // Students Collection
    match /students/{studentId} {
      allow read: if isAuthenticated() && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || (isStudent(request.auth.uid) && isOwnerOfStudentData(studentId)));
      allow create: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
      allow update: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
      allow delete: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // Teachers Collection
    match /teachers/{teacherId} {
      allow read: if isAuthenticated() && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid)); // Admins and all teachers can read teacher profiles
      allow create: if isAuthenticated() && isAdmin(request.auth.uid); // Only Admins can create new teacher profiles directly in this collection
      allow update: if isAuthenticated() && (isAdmin(request.auth.uid) || (isTeacher(request.auth.uid) && isOwnerOfTeacherData(teacherId))); // Admins or the teacher themselves
      allow delete: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // Hall of Fame Items Collection
    match /hall_of_fame_items/{itemId} {
      allow read: if true; // Everyone can read Hall of Fame
      allow write: if isAuthenticated() && isAdmin(request.auth.uid); // Only Admins can create, update, delete
    }

    // App Settings Collection
    match /app_settings/{settingId} {
      allow read: if true; // Everyone can read app settings (like app name, logo)
      allow write: if isAuthenticated() && isAdmin(request.auth.uid); // Only Admins can change app settings
    }
  }
}
