
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    // Fetches the user document (not just data) for a given userId
    function getUserDoc(userId) {
      return get(/databases/$(database)/documents/users/$(userId));
    }

    // Fetches data for a given userId from the 'users' collection
    // Assumes the document exists; use with .exists check if unsure
    function getUserData(userId) {
      return getUserDoc(userId).data;
    }

    function isUserRole(userId, targetRole) {
      // Ensure user data exists before trying to access .role
      let userData = getUserData(userId);
      return userData != null && userData.role == targetRole;
    }

    function isAdmin(userId) {
      return isAuthenticated() && isUserRole(userId, 'Admin');
    }

    function isTeacher(userId) {
      return isAuthenticated() && isUserRole(userId, 'Teacher');
    }

    function isStudent(userId) {
      return isAuthenticated() && isUserRole(userId, 'Student');
    }

    // Checks if a teacher is assigned to a specific class (ignoring section/group)
    function isTeacherAssignedToClass(teacherAssignments, targetClassId) {
      return teacherAssignments != null && teacherAssignments is list &&
             teacherAssignments.filter(assignment =>
               assignment.classId == targetClassId
             ).size() > 0;
    }

    // Checks if a teacher is assigned to a student's specific class, section, and group
    function isTeacherAssignedToStudent(teacherAssignments, studentClassId, studentSectionIdFromDoc, studentGroupIdFromDoc) {
      return teacherAssignments != null && teacherAssignments is list &&
             teacherAssignments.filter(assignment =>
                assignment.classId == studentClassId &&
                // Check section: if assignment has no section, it applies to all sections (studentSectionIdFromDoc can be null/absent or match)
                // OR if assignment has a section, it must match student's section.
                ( (!('sectionId' in assignment) || assignment.sectionId == null || assignment.sectionId == '') || assignment.sectionId == studentSectionIdFromDoc ) &&
                // Similar logic for groupId
                ( (!('groupId' in assignment) || assignment.groupId == null || assignment.groupId == '') || assignment.groupId == studentGroupIdFromDoc )
             ).size() > 0;
    }

    // Rules for 'users' collection
    match /users/{userId} {
      // `let` bindings for this match block
      let isOwner = request.auth.uid == userId;
      let isAdminUser = isAdmin(request.auth.uid);
      let targetUserDocData = resource.data; // Existing data for update
      let incomingUserData = request.resource.data; // New data for create/update

      allow read: if isAuthenticated() && (isOwner || isAdminUser);
      allow create: if isAdminUser || isOwner; // Allows user self-creation or admin creation
      allow update: if isAuthenticated() &&
                       (
                         isAdminUser ||
                         ( // User updating their own specific, non-critical fields
                           isOwner &&
                           incomingUserData.keys().hasOnly(['name', 'displayName', 'photoURL', 'lastLogin']) &&
                           incomingUserData.role == targetUserDocData.role && // Role cannot be changed by self
                           incomingUserData.email == targetUserDocData.email // Email (auth identifier) cannot be changed by self
                         )
                       );
      allow delete: if isAdminUser;
    }

    // Rules for 'teachers' HR profiles collection
    match /teachers/{teacherId} {
      let isOwner = request.auth.uid == teacherId;
      let isAdminUser = isAdmin(request.auth.uid);

      allow read: if isAuthenticated() && (isOwner || isAdminUser);
      allow list: if isAdminUser;
      allow create, update, delete: if isAdminUser;
    }

    // Root collection for student data, documents are class containers
    match /student_data_by_class/{classId} {
      // Rules for the class container document itself (e.g., student_data_by_class/LKG)
      allow read, write: if isAdmin(request.auth.uid); // Admins can manage class container docs

      // Nested match for the 'profiles' subcollection under each class document
      match /profiles/{studentProfileId} {
        // `let` bindings specific to this /profiles/{studentProfileId} context
        let studentDocBeingAccessedData = resource.data; // Existing document data
        let studentDataForWriteRequest = request.resource.data; // Data in a create/update request
        let requestingUserAuthUid = request.auth.uid;
        // Fetch requesting user's document data once, ensure it exists before using its fields
        let requestingUserDocument = getUserDoc(requestingUserAuthUid);
        let requestingUserData = requestingUserDocument.data;


        allow read: if isAuthenticated() && requestingUserDocument.exists == true &&
                      (
                        requestingUserData.role == 'Admin' ||
                        ( // Student self-access
                          requestingUserData.role == 'Student' &&
                          requestingUserData.classId == classId &&
                          requestingUserData.studentProfileId == studentProfileId &&
                          studentDocBeingAccessedData.authUid == requestingUserAuthUid
                        ) ||
                        ( // Teacher access
                          requestingUserData.role == 'Teacher' &&
                          isTeacherAssignedToStudent(requestingUserData.assignments, classId, studentDocBeingAccessedData.sectionId, studentDocBeingAccessedData.groupId)
                        )
                      );

        allow list: if isAuthenticated() && requestingUserDocument.exists == true &&
                      (
                        requestingUserData.role == 'Admin' ||
                        (
                          requestingUserData.role == 'Teacher' &&
                          isTeacherAssignedToClass(requestingUserData.assignments, classId)
                        )
                      );

        allow create: if isAuthenticated() && requestingUserDocument.exists == true &&
                        (
                          requestingUserData.role == 'Admin' ||
                          (
                            requestingUserData.role == 'Teacher' &&
                            isTeacherAssignedToClass(requestingUserData.assignments, classId) &&
                            studentDataForWriteRequest.classId == classId // Ensure data consistency
                            // studentDataForWriteRequest.authUid should be set by trusted server/function, or validated carefully
                          )
                        ) && studentDataForWriteRequest.authUid != null; // Student profile must have an authUid

        allow update: if isAuthenticated() && requestingUserDocument.exists == true &&
                        (
                          requestingUserData.role == 'Admin' ||
                          (
                            requestingUserData.role == 'Teacher' &&
                            isTeacherAssignedToStudent(requestingUserData.assignments, classId, studentDocBeingAccessedData.sectionId, studentDocBeingAccessedData.groupId)
                          )
                        ) && studentDataForWriteRequest.authUid == studentDocBeingAccessedData.authUid; // authUid cannot be changed

        allow delete: if isAuthenticated() && requestingUserDocument.exists == true && requestingUserData.role == 'Admin';
      }
    } // This curly brace closes: match /student_data_by_class/{classId}

    // Rules for 'app_settings' collection
    match /app_settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin(request.auth.uid);
    }

    // Rules for 'hall_of_fame_items' collection
    match /hall_of_fame_items/{itemId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin(request.auth.uid);
    }
  } // This curly brace closes: match /databases/{database}/documents
} // This curly brace closes: service cloud.firestore

    