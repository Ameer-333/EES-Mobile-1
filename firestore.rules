
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isUserRole(userId, role) {
      let userData = getUserData(userId);
      return userData.role == role;
    }

    function isAdmin(userId) {
      return isAuthenticated() && isUserRole(userId, 'Admin');
    }

    function isTeacher(userId) {
      return isAuthenticated() && isUserRole(userId, 'Teacher');
    }

    function isStudent(userId) {
      return isAuthenticated() && isUserRole(userId, 'Student');
    }

    // Checks if a teacher is assigned to a specific class (ignoring section/group)
    function isTeacherAssignedToClass(teacherAssignments, targetClassId) {
      return teacherAssignments.filter(assignment =>
        assignment.classId == targetClassId
      ).size() > 0;
    }

    // Checks if a teacher's assignments match a specific student's class, section, and group
    function isTeacherAssignedToStudentClass(teacherAssignments, studentClassId, studentSectionId, studentGroupId) {
      return teacherAssignments.filter(assignment =>
        assignment.classId == studentClassId &&
        ( (assignment.type == 'mother_teacher' || assignment.type == 'class_teacher' || assignment.type == 'subject_teacher') ?
            (assignment.sectionId == null || assignment.sectionId == '' || assignment.sectionId == studentSectionId) :
          (assignment.type == 'nios_teacher' || assignment.type == 'nclp_teacher') ?
            (assignment.groupId == null || assignment.groupId == '' || assignment.groupId == studentGroupId) :
          false
        )
      ).size() > 0;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin(request.auth.uid));
      allow create: if isAdmin(request.auth.uid) || request.auth.uid == userId; // Allow user self-creation for signup
      allow update: if isAdmin(request.auth.uid) ||
                       (request.auth.uid == userId && (
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'displayName', 'photoURL', 'lastLogin'])
                       ));
      allow delete: if isAdmin(request.auth.uid);
    }

    // Rules for the 'teachers' collection (HR Profiles)
    match /teachers/{teacherId} {
      allow read: if isAuthenticated() && (request.auth.uid == teacherId || isAdmin(request.auth.uid));
      allow list: if isAdmin(request.auth.uid);
      allow create, update, delete: if isAdmin(request.auth.uid);
    }

    // Rules for student data, organized by class, then profiles subcollection
    match /student_data_by_class/{classId} {
      // Rules for the class document itself (e.g., student_data_by_class/LKG)
      // Allow admins to manage these class container documents if needed.
      allow read, write: if isAdmin(request.auth.uid);

      // Nested match for the 'profiles' subcollection within each class document
      match /profiles/{studentProfileId} {
        let studentResource = resource.data; // Existing data for read/update/delete
        let studentRequest = request.resource.data; // Incoming data for create/update
        let requestUserDoc = getUserData(request.auth.uid);

        allow read: if isAuthenticated() &&
                      ( isAdmin(request.auth.uid) ||
                        ( isStudent(request.auth.uid) &&
                          requestUserDoc.classId == classId &&
                          requestUserDoc.studentProfileId == studentProfileId &&
                          studentResource.authUid == request.auth.uid
                        ) ||
                        ( isTeacher(request.auth.uid) &&
                          isTeacherAssignedToStudentClass(requestUserDoc.assignments, classId, studentResource.sectionId, studentResource.groupId)
                        )
                      );

        // Allow teachers assigned to the class (or admins) to list students in that class
        allow list: if isAuthenticated() &&
                      ( isAdmin(request.auth.uid) ||
                        (isTeacher(request.auth.uid) && isTeacherAssignedToClass(requestUserDoc.assignments, classId))
                      );

        allow create: if isAuthenticated() &&
                        (isAdmin(request.auth.uid) || isTeacher(request.auth.uid)) &&
                        isTeacherAssignedToClass(requestUserDoc.assignments, classId) && // Teacher must be assigned to the class they are adding to
                        studentRequest.classId == classId && // Ensure data consistency
                        studentRequest.authUid != null; // Student must have an authUid

        allow update: if isAuthenticated() &&
                        (isAdmin(request.auth.uid) ||
                          ( isTeacher(request.auth.uid) &&
                            isTeacherAssignedToStudentClass(requestUserDoc.assignments, classId, studentResource.sectionId, studentResource.groupId)
                          )
                        ) &&
                        studentRequest.authUid == studentResource.authUid; // Prevent changing the linked authUid

        allow delete: if isAdmin(request.auth.uid);
      }
    }

    // Rules for 'app_settings'
    match /app_settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin(request.auth.uid);
    }

    // Rules for 'hall_of_fame_items'
    match /hall_of_fame_items/{itemId} {
      allow read: if isAuthenticated(); // Or make public: allow read: if true;
      allow list: if isAuthenticated(); // Or make public: allow list: if true;
      allow create, update, delete: if isAdmin(request.auth.uid);
    }
  }
}

    