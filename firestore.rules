
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function getUserData(userId) {
      // Returns the user's data map, or null if the document doesn't exist or has no data.
      let doc = get(/databases/$(database)/documents/users/$(userId));
      return doc.data; // Access .data directly. If doc doesn't exist, .data is null.
    }

    function getUserRole(userId) {
      let userData = getUserData(userId);
      // Ensure userData and userData.role exist to prevent errors.
      return userData != null && userData.role != null ? userData.role : null;
    }

    function isUserRole(userId, role) {
      return isUserAuthenticated() && getUserRole(userId) == role;
    }

    function isAdmin(userId) {
      return isUserRole(userId, 'Admin');
    }

    function isTeacher(userId) {
      return isUserRole(userId, 'Teacher');
    }

    function isCoordinator(userId) {
      return isUserRole(userId, 'Coordinator');
    }

    function isStudent(userId) {
      return isUserRole(userId, 'Student');
    }

    function isOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    // Helper to check if a teacher is assigned to a specific class (by classId)
    function isTeacherAssignedToClass(teacherId, targetClassId) {
      let teacherData = getUserData(teacherId);
      return isTeacher(teacherId) &&
             teacherData != null &&
             teacherData.assignments != null &&
             teacherData.assignments is list &&
             teacherData.assignments.size() > 0 &&
             teacherData.assignments.filter(a, a is map && a.classId == targetClassId).size() > 0;
    }

    // Helper for checking a single assignment against student details
    function checkSingleAssignment(assignment, targetClassId, studentSectionId, studentGroupId) {
      return assignment is map && // Ensure assignment is a map
             assignment.classId == targetClassId &&
             (assignment.sectionId == null || assignment.sectionId == studentSectionId) &&
             (assignment.groupId == null || assignment.groupId == studentGroupId) &&
             (
               assignment.type == 'class_teacher' ||
               assignment.type == 'mother_teacher' ||
               (assignment.type == 'subject_teacher' && assignment.subjectId != null) ||
               assignment.type == 'nios_teacher' ||
               assignment.type == 'nclp_teacher'
             );
    }

    // Helper to check if a teacher is assigned to a specific student
    function isTeacherAssignedToStudent(teacherId, targetClassId, studentSectionId, studentGroupId) {
      let teacherData = getUserData(teacherId);
      return isTeacher(teacherId) &&
             teacherData != null &&
             teacherData.assignments != null &&
             teacherData.assignments is list &&
             teacherData.assignments.size() > 0 &&
             teacherData.assignments.filter(a, checkSingleAssignment(a, targetClassId, studentSectionId, studentGroupId)).size() > 0;
    }

    // USER PROFILES (/users/{userId})
    match /users/{userId} {
      allow read: if isUserAuthenticated() &&
                     (isOwner(userId) || isAdmin(request.auth.uid) || isCoordinator(request.auth.uid) ||
                      (isTeacher(request.auth.uid) && getUserData(userId).role == 'Student' && isTeacherAssignedToClass(request.auth.uid, getUserData(userId).classId))
                     );
      allow list: if isAdmin(request.auth.uid) || isCoordinator(request.auth.uid);
      allow create: if isUserAuthenticated() &&
                       (isOwner(userId) || isAdmin(request.auth.uid));
      allow update: if isUserAuthenticated() &&
                      (
                        (isOwner(userId) && request.resource.data.role == resource.data.role) ||
                        (isOwner(userId) && resource.data.role == null && request.resource.data.role == 'Admin') ||
                        (isOwner(userId) && resource.data.role != 'Admin' && request.resource.data.role == 'Admin') ||
                        isAdmin(request.auth.uid)
                      );
      allow delete: if isAdmin(request.auth.uid) && request.auth.uid != userId;
    }

    // TEACHER HR PROFILES (/teachers/{teacherAuthUid}) - teacherAuthUid is the same as user.id for teachers
    match /teachers/{teacherAuthUid} {
      allow read: if isUserAuthenticated() &&
                     (isAdmin(request.auth.uid) || isCoordinator(request.auth.uid) || (isTeacher(request.auth.uid) && request.auth.uid == teacherAuthUid));
      allow list: if isAdmin(request.auth.uid) || isCoordinator(request.auth.uid);
      allow create: if isUserAuthenticated() && (isAdmin(request.auth.uid) || isCoordinator(request.auth.uid));
      allow update: if isUserAuthenticated() &&
                     (isAdmin(request.auth.uid) || isCoordinator(request.auth.uid) || (isTeacher(request.auth.uid) && request.auth.uid == teacherAuthUid));
      allow delete: if isAdmin(request.auth.uid);
    }

    // STUDENT DATA (/student_data_by_class/{classId}/profiles/{studentProfileId})
    match /student_data_by_class/{classId} {
      allow read, list: if isUserAuthenticated() && (isAdmin(request.auth.uid) || isCoordinator(request.auth.uid) || isTeacherAssignedToClass(request.auth.uid, classId));

      match /profiles/{studentProfileId} {
        allow read: if isUserAuthenticated() &&
                      (
                        (isStudent(request.auth.uid) && getUserData(request.auth.uid).studentProfileId == studentProfileId && getUserData(request.auth.uid).classId == classId) ||
                        isAdmin(request.auth.uid) ||
                        isCoordinator(request.auth.uid) ||
                        (isTeacher(request.auth.uid) && isTeacherAssignedToStudent(request.auth.uid, classId, resource.data.sectionId, resource.data.groupId))
                      );
        allow list: if isUserAuthenticated() && (isAdmin(request.auth.uid) || isCoordinator(request.auth.uid) || isTeacherAssignedToClass(request.auth.uid, classId));
        allow create: if isUserAuthenticated() && (isAdmin(request.auth.uid) || (isTeacher(request.auth.uid) && isTeacherAssignedToClass(request.auth.uid, classId)));
        allow update: if isUserAuthenticated() &&
                      (
                        isAdmin(request.auth.uid) ||
                        isCoordinator(request.auth.uid) ||
                        (isTeacher(request.auth.uid) && isTeacherAssignedToStudent(request.auth.uid, classId, resource.data.sectionId, resource.data.groupId))
                      );
        allow delete: if isUserAuthenticated() && (isAdmin(request.auth.uid) || (isTeacher(request.auth.uid) && isTeacherAssignedToClass(request.auth.uid, classId)));
      }
    }

    // APP SETTINGS (/app_settings/general)
    match /app_settings/general {
      allow read: if true;
      allow write: if isUserAuthenticated() && isAdmin(request.auth.uid);
    }

    // HALL OF FAME (/hall_of_fame_items/{itemId})
    match /hall_of_fame_items/{itemId} {
      allow read: if true;
      allow list: if true;
      allow create, update, delete: if isUserAuthenticated() && isAdmin(request.auth.uid);
    }
  }
}

    