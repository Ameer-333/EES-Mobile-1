
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function getUserRole(userId) {
      return getUserData(userId).role;
    }
    
    function isRole(role) {
      return isAuthenticated() && getUserRole(request.auth.uid) == role;
    }

    function isAdmin() {
      return isRole('Admin');
    }

    function isCoordinator() {
      return isRole('Coordinator');
    }

    function isTeacher() {
      return isRole('Teacher');
    }

    // --- Collection Rules ---

    // USERS: Core user data with roles
    match /users/{userId} {
      // Admins and Coordinators can read any user profile.
      // Users can read their own data.
      allow read: if isAdmin() || isCoordinator() || isUser(userId);
      
      // Only Admins can create/update/delete user records directly.
      // (Creation is handled by a Cloud Function invoked by an Admin).
      allow write: if isAdmin();
    }
    
    // TEACHERS: HR-specific profiles for teachers
    match /teachers/{teacherId} {
      // Admins and Coordinators can read any teacher profile.
      // A teacher can read their own profile.
      allow read: if isAdmin() || isCoordinator() || isUser(teacherId);
      
      // Admins and Coordinators can edit teacher profiles.
      allow write: if isAdmin() || isCoordinator();
    }
    
    // COORDINATORS: Profiles for coordinators
    match /coordinators/{coordinatorId} {
      // Admins can read any coordinator profile.
      // A coordinator can read their own.
      allow read: if isAdmin() || isUser(coordinatorId);
      
      // Only Admins can edit coordinator profiles.
      allow write: if isAdmin();
    }

    // STUDENT DATA: Nested by class, contains detailed student profiles
    match /student_data_by_class/{classId}/profiles/{studentId} {
      // Any authenticated Teacher can read/write any student data.
      // This is a broad rule for simplicity; a more advanced implementation
      // would check a teacher's `assignments` array against the {classId}.
      // The student can also read their own data.
      // Admins and Coordinators have full access.
      allow read: if isAdmin() || isCoordinator() || isTeacher() || (isAuthenticated() && request.auth.uid == resource.data.authUid);
      allow write: if isAdmin() || isCoordinator() || isTeacher();
    }
    
    // APP SETTINGS: Global settings for the application
    match /app_settings/general {
      // Anyone can read app settings (for login page branding).
      allow read: if true;
      
      // Only Admins can change settings.
      allow write: if isAdmin();
    }
    
    // HALL OF FAME: Publicly visible achievements
    match /hall_of_fame_items/{itemId} {
      // Everyone can read the hall of fame.
      allow read: if true;
      
      // Only Admins can manage the hall of fame.
      allow write: if isAdmin();
    }
    
    // TEACHER APPRAISAL REQUESTS: Submitted by coordinators for admin review
    match /teacher_appraisal_requests/{requestId} {
      // A coordinator can create a request, ensuring they are the author.
      allow create: if isCoordinator() && request.auth.uid == request.resource.data.requestedByCoordinatorId;
      
      // Admins can read all requests. Coordinators can only read requests they created.
      allow read: if isAdmin() || (isCoordinator() && request.auth.uid == resource.data.requestedByCoordinatorId);
      
      // Only Admins can update (approve/reject) requests.
      allow update: if isAdmin();
      
      // Deletion of requests is disallowed to maintain a record.
      allow delete: if false;
    }
  }
}
