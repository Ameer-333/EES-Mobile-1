
rules_version = '2';

service cloud.firestore {
  // Helper functions
  function isAuthenticated() {
    return request.auth != null;
  }

  // Function to get a user's role from the 'users' collection
  // Assumes the document ID in 'users' collection is the user's auth UID
  function getUserRole(userId) {
    return get(/databases/$(database)/documents/users/$(userId)).data.role;
  }

  function isAdmin() {
    return isAuthenticated() && getUserRole(request.auth.uid) == 'Admin';
  }

  function isTeacher() {
    return isAuthenticated() && getUserRole(request.auth.uid) == 'Teacher';
  }

  function isStudent() {
    return isAuthenticated() && getUserRole(request.auth.uid) == 'Student';
  }

  // Function to check if the requesting user is the owner of the student document
  // Assumes student documents have an 'authUid' field matching the user's auth UID
  function isOwnerOfStudentData(studentDocId) {
    return isAuthenticated() && request.auth.uid == get(/databases/$(database)/documents/students/$(studentDocId)).data.authUid;
  }

  // Function to check if the requesting user is the owner of the teacher document
  // Assumes teacher documents (their own profile) are identified by their auth UID in the 'teachers' collection
  function isOwnerOfTeacherData(teacherDocId) {
    return isAuthenticated() && request.auth.uid == teacherDocId;
  }


  match /databases/{database}/documents {

    // App Settings: Publicly readable, only admins can write
    match /app_settings/{settingId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // User Profiles:
    // - Admins can read and write all user profiles.
    // - Authenticated users can read their own profile (useful if they need to fetch their own role, though typically this is on custom claims).
    match /users/{userId} {
      allow read: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);
      allow create: if isAdmin(); // Only admins can create user profile entries
      allow update: if isAdmin(); // Only admins can update user profiles
      allow delete: if isAdmin(); // Only admins can delete user profiles
    }

    // Student Data:
    // - Admins and Teachers can read all student data.
    // - Students can read their own data (requires 'authUid' field on student document).
    // - Admins and Teachers can create, update, and delete student data.
    match /students/{studentId} {
      allow read: if isAdmin() || isTeacher() || isOwnerOfStudentData(studentId);
      allow create: if isAdmin() || isTeacher();
      allow update: if isAdmin() || isTeacher();
      allow delete: if isAdmin() || isTeacher();
      // Potentially add more granular rules here for what students can update on their own profile if needed
    }

    // Teacher Data:
    // - Admins can read and write all teacher data.
    // - Teachers can read their own profile data.
    // - Teachers might be able to update parts of their own profile (e.g., reason for absence).
    match /teachers/{teacherId} {
      allow read: if isAdmin() || (isTeacher() && isOwnerOfTeacherData(teacherId));
      allow create: if isAdmin(); // Only Admins can create new teacher entries
      allow update: if isAdmin() || (isTeacher() && isOwnerOfTeacherData(teacherId)); // Admins can update any, Teachers can update their own
      allow delete: if isAdmin();
    }

    // Hall of Fame Items:
    // - Publicly readable.
    // - Only Admins can create, update, or delete.
    match /hall_of_fame_items/{itemId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Add rules for other collections here if they are created (e.g., messages, attendance details)
    // Example for a potential 'messages' collection:
    // match /messages/{messageId} {
    //   allow read, write: if isAuthenticated(); // Basic: any logged-in user, refine based on sender/receiver
    // }
  }
}
