
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin(userId) {
      let userData = getUserData(userId);
      return userData != null && userData.role == 'Admin';
    }

    // Checks if a teacher is assigned to a specific student's class/section/group.
    // targetStudentSectionId and targetStudentGroupId can be null or strings.
    function isTeacherAssignedToStudentClass(teacherAssignments, targetStudentClassId, targetStudentSectionId, targetStudentGroupId) {
      return teacherAssignments.filter(assignment =>
        assignment.classId == targetStudentClassId &&
        // If assignment has sectionId, it must match. If assignment.sectionId is null/empty, it means class-wide for that type.
        (assignment.sectionId == null || assignment.sectionId == "" || assignment.sectionId == targetStudentSectionId) &&
        // If assignment has groupId, it must match. If assignment.groupId is null/empty, it's not group-specific for that class/section.
        (assignment.groupId == null || assignment.groupId == "" || assignment.groupId == targetStudentGroupId)
      ).size() > 0;
    }

    // Simpler check if teacher is assigned to a classId generally (for creating students in that class)
    function isTeacherAssignedToClass(teacherAssignments, targetClassId) {
      return teacherAssignments.filter(assignment => assignment.classId == targetClassId).size() > 0;
    }

    // Rules for 'users' collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin(request.auth.uid));
      allow create: if isAuthenticated() && isAdmin(request.auth.uid); // Only admins can create new user stubs
      allow update: if isAuthenticated() &&
                      ( (request.auth.uid == userId && request.resource.data.keys().hasOnly(['name', 'displayName', 'photoURL', 'lastLogin'])) || // User can update limited fields
                        isAdmin(request.auth.uid) ); // Admins can update anything, including assignments for teachers
      allow delete: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // Rules for 'teachers' collection (HR Profiles)
    match /teachers/{teacherId} {
      allow read: if isAuthenticated() && (request.auth.uid == teacherId || isAdmin(request.auth.uid));
      allow list: if isAuthenticated() && isAdmin(request.auth.uid);
      allow create, update, delete: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // Rules for 'student_data_by_class/{classId}/profiles/{studentProfileId}'
    match /student_data_by_class/{classId}/profiles/{studentProfileId} {
      function studentResourceData() { // Data of the document being accessed/modified
        return resource.data;
      }
      function studentRequestData() { // Data in the incoming request (for create/update)
        return request.resource.data;
      }
      function requestingUserDoc() {
        return getUserData(request.auth.uid);
      }

      allow read: if isAuthenticated() && (
                    isAdmin(request.auth.uid) ||
                    (requestingUserDoc().role == 'Student' &&
                     studentResourceData().authUid == request.auth.uid &&
                     requestingUserDoc().classId == classId &&
                     requestingUserDoc().studentProfileId == studentProfileId
                    ) ||
                    (requestingUserDoc().role == 'Teacher' &&
                     isTeacherAssignedToStudentClass(requestingUserDoc().assignments, classId, studentResourceData().sectionId, studentResourceData().groupId)
                    )
                  );

      allow list: if isAuthenticated() &&
                    ( isAdmin(request.auth.uid) ||
                      (requestingUserDoc().role == 'Teacher' && isTeacherAssignedToClass(requestingUserDoc().assignments, classId))
                    );

      allow create: if isAuthenticated() &&
                      ( isAdmin(request.auth.uid) ||
                        (requestingUserDoc().role == 'Teacher' && isTeacherAssignedToClass(requestingUserDoc().assignments, studentRequestData().classId))
                      ) &&
                      studentRequestData().authUid != null &&
                      studentRequestData().classId == classId; // Student is created in the correct class path

      allow update: if isAuthenticated() &&
                      ( isAdmin(request.auth.uid) ||
                        (requestingUserDoc().role == 'Teacher' && isTeacherAssignedToStudentClass(requestingUserDoc().assignments, classId, studentResourceData().sectionId, studentResourceData().groupId))
                      ) &&
                      studentRequestData().authUid == studentResourceData().authUid; // Prevent changing the authUid link

      allow delete: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // Rules for 'app_settings'
    match /app_settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    // Rules for 'hall_of_fame_items'
    match /hall_of_fame_items/{itemId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isAdmin(request.auth.uid);
    }
  }
}
