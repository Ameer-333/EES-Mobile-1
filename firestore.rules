
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to get user data and check roles
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(userId) {
      // Ensure we don't try to read a non-existent document during rule evaluation,
      // which can lead to permission denied if the doc doesn't exist yet (e.g., during create).
      return getAfter(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function getIncomingUserData() {
      return request.resource.data;
    }

    function isUserRole(userId, role) {
      return isSignedIn() && getUserData(userId).role == role;
    }
    
    function isUserBeingAssignedRole(role) {
        return isSignedIn() && request.resource.data.role == role;
    }

    function isAdmin() {
      return isUserRole(request.auth.uid, 'Admin');
    }

    function isCoordinator() {
      return isUserRole(request.auth.uid, 'Coordinator');
    }

    function isTeacher() {
      return isUserRole(request.auth.uid, 'Teacher');
    }

    function isStudent() {
      return isUserRole(request.auth.uid, 'Student');
    }

    // --- Users Collection (Authentication profiles, roles, assignments) ---
    match /users/{userId} {
      allow read: if isSignedIn() && (isAdmin() || isCoordinator() || request.auth.uid == userId);

      // Admins can create any user type (except other Admins via UI flow).
      // Teachers can create 'Student' user type entries.
      allow create: if isSignedIn() && (
                      isAdmin() ||
                      (isTeacher() && isUserBeingAssignedRole('Student'))
                    );

      // Admins can update any user profile.
      // Coordinators can update non-sensitive fields if needed by app logic (e.g. their own name, if UI allows).
      // Users can update their own profile (e.g. display name, profile pic URL). Teachers can update their own assignments.
      // Prevent Coordinators from updating roles or other sensitive fields on users.
      allow update: if isSignedIn() && (
                      isAdmin() ||
                      (isCoordinator() && request.auth.uid == userId && !(request.resource.data.role != resource.data.role)) || // Coordinator can update own, but not change their role.
                      (request.auth.uid == userId) // General users can update their own (teacher, student)
                    );

      // Only Admins can delete user documents.
      allow delete: if isAdmin();
    }

    // --- Teachers Collection (HR specific profiles) ---
    match /teachers/{teacherId} {
      // Admins, Coordinators, and the specific teacher can read the teacher's HR profile.
      // Application logic should filter sensitive fields like salaryHistory for non-Admins.
      allow read: if isSignedIn() && (isAdmin() || isCoordinator() || request.auth.uid == teacherId);

      // Only Admins can create, update, or delete teacher HR profiles.
      // Coordinators use the appraisal request system.
      allow write: if isAdmin();
    }
    
    // --- Coordinators Collection ---
    match /coordinators/{coordinatorId} {
        allow read: if isSignedIn() && (isAdmin() || request.auth.uid == coordinatorId);
        // Only Admins can create/update/delete coordinator specific profiles.
        allow write: if isAdmin();
    }


    // --- Student Data (Profiles nested under classId) ---
    // student_data_by_class/{classIdFromPath}/profiles/{studentProfileId}
    match /student_data_by_class/{classIdFromPath}/profiles/{studentProfileId} {

      allow read: if isSignedIn() && (
                    isAdmin() ||
                    isCoordinator() ||
                    (isStudent() && getUserData(request.auth.uid).studentProfileId == studentProfileId && getUserData(request.auth.uid).classId == classIdFromPath) ||
                    (isTeacher() && getUserData(request.auth.uid).assignments.exists(assignment, assignment.classId == classIdFromPath))
                  );

      allow create: if isSignedIn() && (
                      isAdmin() ||
                      (
                        isTeacher() &&
                        request.resource.data.classId == classIdFromPath &&
                        getUserData(request.auth.uid).assignments.exists(assignment,
                          assignment.classId == request.resource.data.classId &&
                          (assignment.sectionId == null || assignment.sectionId == request.resource.data.sectionId) &&
                          (assignment.type == 'class_teacher' || assignment.type == 'mother_teacher')
                        )
                      )
                    );

      allow update: if isSignedIn() && (
                      isAdmin() ||
                      isCoordinator() || // Coordinators can view all student data, update permissions might be fine here too
                      (
                        isTeacher() &&
                        resource.data.classId == classIdFromPath && // Student document is in the correct path
                        (request.resource.data.classId == resource.data.classId || isAdmin() || isCoordinator()) && // Only admin/coord can change classId
                        getUserData(request.auth.uid).assignments.exists(assignment,
                          assignment.classId == resource.data.classId &&
                          (assignment.sectionId == null || assignment.sectionId == resource.data.sectionId) &&
                          (assignment.groupId == null || assignment.groupId == resource.data.groupId)
                        )
                      )
                    );

      // Students should never be deleted from Firestore by client applications.
      // Archiving or soft-delete (status field) should be handled by specific trusted processes if needed.
      allow delete: if false;
    }

    // --- App Settings Collection ---
    match /app_settings/general {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // --- Hall of Fame Collection ---
    match /hall_of_fame_items/{itemId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    // --- Teacher Appraisal Requests Collection ---
    match /teacher_appraisal_requests/{requestId} {
        // Coordinators create. Admins read all, update (process). Teacher can read their own.
        allow read: if isSignedIn() && (
                        isAdmin() || 
                        isCoordinator() ||
                        (isTeacher() && resource.data.teacherId == request.auth.uid)
                      );
        allow create: if isCoordinator();
        allow update: if isAdmin(); // For Admin to approve/reject
        allow delete: if isAdmin();
    }
  }
}
