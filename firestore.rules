
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isUserRole(userId, roleName) {
      let userData = getUserData(userId);
      return userData != null && userData.role == roleName;
    }

    function isAdmin(userId) {
      return isAuthenticated() && isUserRole(userId, 'Admin');
    }

    function isTeacher(userId) {
      return isAuthenticated() && isUserRole(userId, 'Teacher');
    }

    function isStudent(userId) {
      return isAuthenticated() && isUserRole(userId, 'Student');
    }

    // Checks if a teacher is assigned to a specific class, section, and group.
    // Null sectionId means match any section in that class.
    // Null groupId means match any group in that class/section (or no group if not applicable).
    function isTeacherAssignedToStudentClass(teacherAssignments, targetStudentClassId, targetStudentSectionId, targetStudentGroupId) {
      return teacherAssignments.filter(assignment =>
        assignment.classId == targetStudentClassId &&
        (targetStudentSectionId == null || assignment.sectionId == null || assignment.sectionId == targetStudentSectionId) &&
        (targetStudentGroupId == null || assignment.groupId == null || assignment.groupId == targetStudentGroupId)
      ).size() > 0;
    }

    // Checks if a teacher is assigned to a class in general (ignoring section/group for broader class access)
    function isTeacherAssignedToClass(teacherAssignments, targetClassId) {
      return teacherAssignments.filter(assignment =>
        assignment.classId == targetClassId
      ).size() > 0;
    }

    // --- Rules for 'users' collection ---
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin(request.auth.uid));
      allow create: if isAdmin(request.auth.uid) || (request.auth.uid == userId && request.resource.data.email == request.auth.token.email); // User can create their own profile upon signup
      allow update: if isAdmin(request.auth.uid) ||
                       (request.auth.uid == userId && request.resource.data.email == resource.data.email && request.resource.data.role == resource.data.role); // User can update their own non-critical fields
      allow delete: if isAdmin(request.auth.uid);
    }

    // --- Rules for 'teachers' HR profiles ---
    match /teachers/{teacherId} {
      allow read: if isAdmin(request.auth.uid) || (isTeacher(request.auth.uid) && request.auth.uid == teacherId);
      allow create, update, delete: if isAdmin(request.auth.uid);
    }

    // --- Rules for 'student_data_by_class' ---
    // This structure has classId as document ID, and student profiles in a subcollection
    match /student_data_by_class/{classId} {
      // Allow reading the class document itself (if it ever contains data) by assigned teachers or admins
      allow read: if isAdmin(request.auth.uid) ||
                     (isTeacher(request.auth.uid) && isTeacherAssignedToClass(getUserData(request.auth.uid).assignments, classId));
      // Admins or assigned teachers can create/update class documents (if they ever store metadata)
      allow write: if isAdmin(request.auth.uid);

      // --- Rules for 'profiles' subcollection under each class ---
      match /profiles/{studentProfileId} {
        let studentResourceData = resource.data; // Existing data for read/update/delete
        let studentRequestData = request.resource.data; // Incoming data for create/update
        let currentUserData = getUserData(request.auth.uid);

        allow read: if isAuthenticated() && (
          isAdmin(request.auth.uid) ||
          (isStudent(request.auth.uid) &&
            currentUserData.classId == classId && // URL classId matches student's classId
            currentUserData.studentProfileId == studentProfileId && // URL profileId matches student's profileId
            studentResourceData.authUid == request.auth.uid // Document's authUid matches requester
          ) ||
          (isTeacher(request.auth.uid) &&
            isTeacherAssignedToStudentClass(currentUserData.assignments, classId, studentResourceData.sectionId, studentResourceData.groupId)
          )
        );

        // For listing students in a class
        allow list: if isAdmin(request.auth.uid) ||
                       (isTeacher(request.auth.uid) && isTeacherAssignedToClass(getUserData(request.auth.uid).assignments, classId));

        allow create: if (isAdmin(request.auth.uid) ||
                         (isTeacher(request.auth.uid) && isTeacherAssignedToClass(getUserData(request.auth.uid).assignments, studentRequestData.classId))) &&
                        studentRequestData.authUid != null && studentRequestData.classId == classId;

        allow update: if (isAdmin(request.auth.uid) ||
                         (isTeacher(request.auth.uid) && isTeacherAssignedToStudentClass(getUserData(request.auth.uid).assignments, classId, studentResourceData.sectionId, studentResourceData.groupId))) &&
                        studentRequestData.authUid == studentResourceData.authUid; // Prevent changing the authUid link

        allow delete: if isAdmin(request.auth.uid);
      }
    }

    // --- Rules for 'app_settings' collection ---
    match /app_settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin(request.auth.uid);
    }

    // --- Rules for 'hall_of_fame_items' collection ---
    match /hall_of_fame_items/{itemId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin(request.auth.uid);
    }
  }
}

    