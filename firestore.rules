
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to get user data and check roles
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(userId) {
      // It's good practice to check if the document exists before accessing .data
      // However, in security rules, a failed get() evaluates to null, and accessing .data on null will cause an error.
      // A safer way is to check existence or use the data directly if you are sure it exists in the context of the rule.
      // For simplicity here, assuming it's used where existence is implied or handled by rule logic.
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isUserRole(userId, role) {
      let userData = get(/databases/$(database)/documents/users/$(userId));
      return isSignedIn() && userData.data.role == role;
    }

    function isAdmin() {
      return isUserRole(request.auth.uid, 'Admin');
    }

    function isCoordinator() {
      return isUserRole(request.auth.uid, 'Coordinator');
    }

    function isTeacher() {
      return isUserRole(request.auth.uid, 'Teacher');
    }

    function isStudent() {
      return isUserRole(request.auth.uid, 'Student');
    }

    // --- Users Collection (Authentication profiles, roles, assignments) ---
    match /users/{userId} {
      allow read: if isSignedIn() && (isAdmin() || isCoordinator() || request.auth.uid == userId);
      allow create: if isAdmin(); // Admin can create any user. App logic handles auth user creation first.
      allow update: if isSignedIn() && (isAdmin() || isCoordinator() || request.auth.uid == userId);
      allow delete: if isAdmin();
    }

    // --- Teachers Collection (HR specific profiles) ---
    match /teachers/{teacherId} {
      allow read: if isSignedIn() && (isAdmin() || isCoordinator() || request.auth.uid == teacherId);
      // Admin can create/update/delete. Coordinator can also create/update.
      allow write: if isSignedIn() && (isAdmin() || isCoordinator());
    }

    // --- Student Data (Profiles nested under classId) ---
    // student_data_by_class/{classIdFromPath}/profiles/{studentProfileId}
    match /student_data_by_class/{classIdFromPath}/profiles/{studentProfileId} {
      allow read: if isSignedIn() && (
                    isAdmin() ||
                    isCoordinator() ||
                    (isStudent() && getUserData(request.auth.uid).studentProfileId == studentProfileId && getUserData(request.auth.uid).classId == classIdFromPath) ||
                    (isTeacher() && getUserData(request.auth.uid).assignments.exists(assignment, assignment.classId == classIdFromPath)) // Teacher assigned to this classId can read
                  );

      allow create: if isSignedIn() && (
                      isAdmin() ||
                      isCoordinator() ||
                      (
                        isTeacher() &&
                        request.resource.data.classId == classIdFromPath &&
                        getUserData(request.auth.uid).assignments.exists(assignment,
                          assignment.classId == request.resource.data.classId &&
                          (assignment.sectionId == null || assignment.sectionId == request.resource.data.sectionId) &&
                          (assignment.type == 'class_teacher' || assignment.type == 'mother_teacher')
                        )
                      )
                    );

      allow update: if isSignedIn() && (
                      (isAdmin() || isCoordinator()) || // Admins/Coordinators can update anything
                      ( // Teachers can update if assigned, and not changing critical fields like classId
                        isTeacher() &&
                        resource.data.classId == classIdFromPath && // Operating on existing student's correct path
                        (request.resource.data.classId == resource.data.classId) && // Teacher cannot change student's classId
                        getUserData(request.auth.uid).assignments.exists(assignment,
                          assignment.classId == resource.data.classId &&
                          (assignment.sectionId == null || assignment.sectionId == resource.data.sectionId) &&
                          (assignment.groupId == null || assignment.groupId == resource.data.groupId)
                          // Application logic should control *which* fields a teacher can update
                        )
                      )
                    );

      allow delete: if isSignedIn() && (
                      isAdmin() ||
                      isCoordinator() ||
                      (
                        isTeacher() &&
                        resource.data.classId == classIdFromPath &&
                        getUserData(request.auth.uid).assignments.exists(assignment,
                          assignment.classId == resource.data.classId &&
                          (assignment.sectionId == null || assignment.sectionId == resource.data.sectionId) &&
                          (assignment.type == 'class_teacher' || assignment.type == 'mother_teacher')
                        )
                      )
                    );
    }

    // --- App Settings Collection ---
    match /app_settings/general {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // --- Hall of Fame Collection ---
    match /hall_of_fame_items/{itemId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // --- Teacher Appraisal Requests ---
    match /teacher_appraisal_requests/{requestId} {
      allow read: if isSignedIn() &&
                    (isAdmin() ||
                     isCoordinator() ||
                     (isTeacher() && request.auth.uid == resource.data.teacherId)); // Teacher can read their own requests
      allow create: if isCoordinator(); // Only Coordinators can create new appraisal requests
      allow update: if isAdmin(); // Only Admins can update (approve/reject) requests
      allow delete: if isAdmin(); // Only Admins can delete requests
    }
  }
}
