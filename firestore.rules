
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isUserRole(userId, role) {
      let userData = getUserData(userId);
      return userData != null && userData.role == role;
    }

    function isAdmin(userId) {
      return isAuthenticated() && isUserRole(userId, 'Admin');
    }

    function isTeacher(userId) {
      return isAuthenticated() && isUserRole(userId, 'Teacher');
    }

    function isStudent(userId) {
      return isAuthenticated() && isUserRole(userId, 'Student');
    }

    // Checks if a teacher is assigned to a specific class (ignoring section/group for broader class access)
    function isTeacherAssignedToClass(teacherAssignments, targetClassId) {
      return teacherAssignments != null && teacherAssignments is list &&
             teacherAssignments.filter(assignment =>
               assignment.classId == targetClassId
             ).size() > 0;
    }

    // Checks if a teacher is assigned to a student based on class, and optionally section or group
    function isTeacherAssignedToStudent(teacherAssignments, studentClassId, studentSectionId, studentGroupId) {
      return teacherAssignments != null && teacherAssignments is list &&
             teacherAssignments.filter(assignment =>
               assignment.classId == studentClassId &&
               ( ( !('sectionId' in assignment) || assignment.sectionId == null || assignment.sectionId == '') || assignment.sectionId == studentSectionId ) &&
               ( ( !('groupId' in assignment) || assignment.groupId == null || assignment.groupId == '') || assignment.groupId == studentGroupId )
             ).size() > 0;
    }

    // /users/{userId}
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin(request.auth.uid));
      allow list: if isAdmin(request.auth.uid); // Only admins can list all users
      allow create: if isAdmin(request.auth.uid); // Only admins can create raw user entries here
      allow update: if isAdmin(request.auth.uid) ||
                       (isAuthenticated() && request.auth.uid == userId &&
                        request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['name', 'displayName', 'photoURL', 'lastLogin', 'assignments', 'classId', 'studentProfileId'])); // Users can update specific fields
      allow delete: if isAdmin(request.auth.uid);
    }

    // /teachers/{teacherId} - HR specific profiles
    match /teachers/{teacherId} {
      allow read: if isAuthenticated() && (request.auth.uid == teacherId || isAdmin(request.auth.uid));
      allow list: if isAdmin(request.auth.uid);
      allow create, update, delete: if isAdmin(request.auth.uid); // Managed by Admins
    }

    // Student data, organized by class, then profiles
    // /student_data_by_class/{classId}/profiles/{studentProfileId}
    match /student_data_by_class/{classId}/profiles/{studentProfileId} {
      let currentUserData = getUserData(request.auth.uid);
      let studentResourceData = resource.data; // Existing document data for read/update/delete
      let studentRequestData = request.resource.data; // Incoming document data for create/update

      allow read: if isAuthenticated() && (
                    isAdmin(request.auth.uid) ||
                    ( // Student reads their own profile
                      isStudent(request.auth.uid) &&
                      currentUserData.classId == classId &&
                      currentUserData.studentProfileId == studentProfileId &&
                      studentResourceData.authUid == request.auth.uid
                    ) ||
                    ( // Teacher reads profile of a student they are assigned to
                      isTeacher(request.auth.uid) &&
                      isTeacherAssignedToStudent(currentUserData.assignments, classId, studentResourceData.sectionId, studentResourceData.groupId)
                    )
                  );

      allow list: if isAuthenticated() && ( // Who can list students within a class
                    isAdmin(request.auth.uid) ||
                    (isTeacher(request.auth.uid) && isTeacherAssignedToClass(currentUserData.assignments, classId))
                  );

      allow create: if isAuthenticated() &&
                      (isAdmin(request.auth.uid) || isTeacher(request.auth.uid)) &&
                      studentRequestData.classId == classId && // Ensure classId in data matches path
                      ('authUid' in studentRequestData) && studentRequestData.authUid != null;     // Ensure authUid is set


      allow update: if isAuthenticated() &&
                      (isAdmin(request.auth.uid) ||
                        (
                          isTeacher(request.auth.uid) &&
                          isTeacherAssignedToStudent(currentUserData.assignments, classId, studentResourceData.sectionId, studentResourceData.groupId)
                        )
                      ) &&
                      studentRequestData.authUid == studentResourceData.authUid && // Prevent changing authUid
                      studentRequestData.classId == classId; // classId within doc should match path (or be updated carefully by admin)


      allow delete: if isAdmin(request.auth.uid);
    }

    // /app_settings/{settingId}
    match /app_settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin(request.auth.uid);
    }

    // /hall_of_fame_items/{itemId}
    match /hall_of_fame_items/{itemId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin(request.auth.uid);
    }
  }
}

    