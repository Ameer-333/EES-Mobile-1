
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin(userId) {
      return isAuthenticated() && getUserData(userId).role == 'Admin';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Checks if a teacher is assigned to a specific student's class, section, and group.
    // teacherAssignments: The 'assignments' array from the teacher's user document.
    // targetStudentClassId: The classId of the student record being accessed.
    // targetStudentSectionId: The sectionId of the student record (can be null/undefined).
    // targetStudentGroupId: The groupId of the student record (can be null/undefined).
    function isTeacherAssignedToStudentClass(teacherAssignments, targetStudentClassId, targetStudentSectionId, targetStudentGroupId) {
      return teacherAssignments.filter(assignment =>
        assignment.classId == targetStudentClassId &&
        (
          (assignment.type == 'mother_teacher' || assignment.type == 'class_teacher' || assignment.type == 'subject_teacher') &&
          (assignment.sectionId == null || assignment.sectionId == '' || assignment.sectionId == targetStudentSectionId)
        ) ||
        (
          (assignment.type == 'nios_teacher' || assignment.type == 'nclp_teacher') &&
          (assignment.groupId == null || assignment.groupId == '' || assignment.groupId == targetStudentGroupId)
        )
      ).size() > 0;
    }

    // Checks if a teacher is assigned to a given classId (for listing students in a class).
    function isTeacherAssignedToClass(teacherAssignments, targetClassId) {
      return teacherAssignments.filter(assignment => assignment.classId == targetClassId).size() > 0;
    }

    // --- Users Collection ---
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin(request.auth.uid));
      allow create: if isAdmin(request.auth.uid) || request.auth.uid == userId; // Allow user to create their own profile on signup
      allow update: if isAdmin(request.auth.uid) || 
                      (isOwner(userId) && request.resource.data.keys().hasOnly(['name', 'displayName', 'photoURL', 'lastLogin', 'email'])); // User can only update specific fields
      allow delete: if isAdmin(request.auth.uid);
    }

    // --- Teachers (HR Profiles) Collection ---
    match /teachers/{teacherId} { // teacherId is authUid
      allow read: if isAuthenticated() && (isOwner(teacherId) || isAdmin(request.auth.uid));
      allow create, update: if isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }

    // --- Student Data (Organized by Class, then Profiles Subcollection) ---
    match /student_data_by_class/{classId}/profiles/{studentProfileId} {
      let requestingUserDoc = getUserData(request.auth.uid);
      let studentResource = resource.data; // Existing document data for read/update/delete
      let studentRequest = request.resource.data; // Incoming document data for create/update

      allow read: if isAuthenticated() && (
                    isAdmin(request.auth.uid) ||
                    ( // Student can read their own profile
                      requestingUserDoc.role == 'Student' &&
                      requestingUserDoc.classId == classId &&
                      requestingUserDoc.studentProfileId == studentProfileId &&
                      studentResource.authUid == request.auth.uid
                    ) ||
                    ( // Teacher can read profiles of students they are assigned to
                      requestingUserDoc.role == 'Teacher' &&
                      isTeacherAssignedToStudentClass(requestingUserDoc.assignments, classId, studentResource.sectionId, studentResource.groupId)
                    )
                  );
      
      allow list: if isAuthenticated() && ( // For querying/listing students within a class's profile subcollection
                    isAdmin(request.auth.uid) ||
                    (requestingUserDoc.role == 'Teacher' && isTeacherAssignedToClass(requestingUserDoc.assignments, classId))
                  );

      allow create: if isAuthenticated() && 
                      (isAdmin(request.auth.uid) || requestingUserDoc.role == 'Teacher') &&
                      isTeacherAssignedToClass(requestingUserDoc.assignments, studentRequest.classId) && // Teacher must be assigned to the class they are adding student to
                      studentRequest.authUid == get(/databases/$(database)/documents/users/$(studentRequest.authUid)).data.uid && // Ensure authUid matches a real user
                      studentRequest.classId == classId; // Ensure student's classId field matches the path classId


      allow update: if isAuthenticated() &&
                      (isAdmin(request.auth.uid) || requestingUserDoc.role == 'Teacher') &&
                      isTeacherAssignedToStudentClass(requestingUserDoc.assignments, classId, studentResource.sectionId, studentResource.groupId) &&
                      studentRequest.authUid == studentResource.authUid && // Prevent changing the student's authUid link
                      studentRequest.studentProfileId == studentResource.studentProfileId; // Prevent changing their own profile ID within the class
                      // Add more granular field checks if needed (e.g. subject teachers only update their subject marks)

      allow delete: if isAdmin(request.auth.uid);
    }

    // --- App Settings ---
    match /app_settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin(request.auth.uid);
    }

    // --- Hall of Fame ---
    match /hall_of_fame_items/{itemId} {
      allow read: if isAuthenticated(); // Or allow public read: if true;
      allow write: if isAdmin(request.auth.uid);
    }
  }
}
