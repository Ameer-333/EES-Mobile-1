
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserRole(userId) {
      // Path to the user's document in the 'users' collection.
      // Using (default) explicitly for the database ID.
      // Ensure userId is valid before path construction.
      if (userId == null || userId == "") {
        return null;
      }
      let userDocumentPath = /databases/(default)/documents/users/$(userId);
      let userDocument = get(userDocumentPath);

      // Check if the document exists and has a 'role' field.
      if (userDocument.data == null || !('role' in userDocument.data)) {
        return null; // Role cannot be determined
      }
      return userDocument.data.role;
    }

    function isAdmin(userId) {
      let role = getUserRole(userId);
      return role != null && role == 'Admin';
    }

    function isTeacher(userId) {
      let role = getUserRole(userId);
      return role != null && role == 'Teacher';
    }

    function isStudent(userId) {
      let role = getUserRole(userId);
      return role != null && role == 'Student';
    }

    // Rule for accessing student's own data based on 'authUid' field in student document
    function isOwnerOfStudentData(studentId) {
      let studentDoc = get(/databases/(default)/documents/students/$(studentId));
      return studentDoc.data != null && studentDoc.data.authUid == request.auth.uid;
    }

    // Rule for accessing teacher's own data (document ID is auth UID)
    function isOwnerOfTeacherData(teacherId) {
      return request.auth.uid == teacherId;
    }

    // App Settings Collection
    match /app_settings/{settingId} {
      allow read: if true; // Publicly readable app settings (e.g., app name, logo)
      allow write: if isAuthenticated() && isAdmin(request.auth.uid); // Only admins can change settings
    }

    // Users Collection (for managing user roles, status by Admins)
    match /users/{userId} {
      allow read: if isAuthenticated() && (isAdmin(request.auth.uid) || request.auth.uid == userId); // Admins can read any user, users can read their own profile
      allow create: if isAuthenticated() && isAdmin(request.auth.uid); // Only admins can create user role documents
      allow update: if isAuthenticated() && isAdmin(request.auth.uid); // Only admins can update user role documents
      allow delete: if isAuthenticated() && isAdmin(request.auth.uid); // Only admins can delete user role documents
    }

    // Students Collection
    match /students/{studentId} {
      allow read: if isAuthenticated() && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || (isStudent(request.auth.uid) && isOwnerOfStudentData(studentId)) );
      allow create: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
      allow update: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
      allow delete: if isAuthenticated() && isAdmin(request.auth.uid); // Or more restrictive if needed
    }

    // Teachers Collection
    match /teachers/{teacherId} {
      allow read: if isAuthenticated() && (isAdmin(request.auth.uid) || (isTeacher(request.auth.uid) && isOwnerOfTeacherData(teacherId)) );
      allow create: if isAuthenticated() && isAdmin(request.auth.uid); // Only admins can create teacher profiles directly
      allow update: if isAuthenticated() && isAdmin(request.auth.uid); // Or teacher can update their own
      allow delete: if isAuthenticated() && isAdmin(request.auth.uid);
    }
    
    // Hall of Fame Items Collection
    match /hall_of_fame_items/{itemId} {
      allow read: if true; // Hall of Fame is publicly viewable
      allow create, update, delete: if isAuthenticated() && isAdmin(request.auth.uid); // Only admins can manage Hall of Fame
    }
  }
}
