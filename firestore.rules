
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function getUserData(userId) {
      // It's good practice to check if the path exists before accessing .data if it might not exist
      // However, in most contexts here, we expect userId to be valid and the doc to exist.
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function getUserRole(userId) {
      let userData = getUserData(userId); // This will be evaluated as part of the expression
      return userData != null && userData.role != null ? userData.role : null;
    }

    function isUserRole(userId, role) {
      return isUserAuthenticated() && getUserRole(userId) == role;
    }

    function isAdmin(userId) {
      return isUserRole(userId, 'Admin');
    }

    function isTeacher(userId) {
      return isUserRole(userId, 'Teacher');
    }

    function isCoordinator(userId) {
      return isUserRole(userId, 'Coordinator');
    }

    function isStudent(userId) {
      return isUserRole(userId, 'Student');
    }

    function isOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    // Helper to check if a teacher is assigned to a specific class (by classId)
    function isTeacherAssignedToClass(teacherId, targetClassId) {
      return isTeacher(teacherId) &&
             getUserData(teacherId).assignments != null && // Ensure assignments list exists
             getUserData(teacherId).assignments.filter(assignment, assignment.classId == targetClassId).size() > 0;
    }

    // Helper to check if a teacher has *any* assignment matching the student's class, section, and group.
    // This is a broader check. More granular subject-specific checks within rules are very complex.
    function isTeacherAssignedToStudentContext(teacherId, studentClassId, studentSectionId, studentGroupId) {
      return isTeacher(teacherId) &&
             getUserData(teacherId).assignments != null && // Ensure assignments list exists
             getUserData(teacherId).assignments.filter(assignment,
                assignment.classId == studentClassId &&
                (assignment.sectionId == null || assignment.sectionId == studentSectionId) &&
                (assignment.groupId == null || assignment.groupId == studentGroupId)
                // We are not checking assignment.type or assignment.subjectId here for simplicity in rules.
                // This function confirms the teacher is generally assigned to the student's grouping.
             ).size() > 0;
    }

    // USER PROFILES (/users/{userId})
    match /users/{userId} {
      allow read: if isUserAuthenticated() &&
                     (isOwner(userId) || isAdmin(request.auth.uid) || isCoordinator(request.auth.uid) ||
                      (isTeacher(request.auth.uid) && getUserData(userId).role == 'Student' && isTeacherAssignedToClass(request.auth.uid, getUserData(userId).classId))
                     );
      allow list: if isAdmin(request.auth.uid) || isCoordinator(request.auth.uid);
      allow create: if isUserAuthenticated() &&
                       (isOwner(userId) || isAdmin(request.auth.uid));
      // Allow user to update their own non-role fields, or promote self to Admin if role was null/non-Admin.
      // Admins can update anything.
      allow update: if isUserAuthenticated() &&
                      (
                        (isOwner(userId) && request.resource.data.role == resource.data.role) ||
                        (isOwner(userId) && resource.data.role == null && request.resource.data.role == 'Admin') ||
                        (isOwner(userId) && resource.data.role != 'Admin' && request.resource.data.role == 'Admin') ||
                        isAdmin(request.auth.uid)
                      );
      allow delete: if isAdmin(request.auth.uid) && request.auth.uid != userId;
    }

    // TEACHER HR PROFILES (/teachers/{teacherAuthUid}) - teacherAuthUid is the same as user.id for teachers
    match /teachers/{teacherAuthUid} {
      allow read: if isUserAuthenticated() &&
                     (isAdmin(request.auth.uid) || isCoordinator(request.auth.uid) || (isTeacher(request.auth.uid) && request.auth.uid == teacherAuthUid));
      allow list: if isAdmin(request.auth.uid) || isCoordinator(request.auth.uid);
      allow create: if isUserAuthenticated() && (isAdmin(request.auth.uid) || isCoordinator(request.auth.uid));
      allow update: if isUserAuthenticated() &&
                     (isAdmin(request.auth.uid) || isCoordinator(request.auth.uid) || (isTeacher(request.auth.uid) && request.auth.uid == teacherAuthUid));
      allow delete: if isAdmin(request.auth.uid);
    }

    // STUDENT DATA (/student_data_by_class/{classId}/profiles/{studentProfileId})
    match /student_data_by_class/{classId} {
      allow read, list: if isUserAuthenticated() && (isAdmin(request.auth.uid) || isCoordinator(request.auth.uid) || isTeacherAssignedToClass(request.auth.uid, classId));

      match /profiles/{studentProfileId} {
        allow read: if isUserAuthenticated() &&
                      (
                        (isStudent(request.auth.uid) && getUserData(request.auth.uid).studentProfileId == studentProfileId && getUserData(request.auth.uid).classId == classId) ||
                        isAdmin(request.auth.uid) ||
                        isCoordinator(request.auth.uid) ||
                        (isTeacher(request.auth.uid) && isTeacherAssignedToStudentContext(request.auth.uid, classId, resource.data.sectionId, resource.data.groupId))
                      );
        allow list: if isUserAuthenticated() && (isAdmin(request.auth.uid) || isCoordinator(request.auth.uid) || isTeacherAssignedToClass(request.auth.uid, classId));
        allow create: if isUserAuthenticated() && (isAdmin(request.auth.uid) || (isTeacher(request.auth.uid) && isTeacherAssignedToClass(request.auth.uid, classId)));
        allow update: if isUserAuthenticated() &&
                      (
                        isAdmin(request.auth.uid) ||
                        isCoordinator(request.auth.uid) ||
                        // For updates, check assignment against existing resource data
                        (isTeacher(request.auth.uid) && isTeacherAssignedToStudentContext(request.auth.uid, classId, resource.data.sectionId, resource.data.groupId))
                      );
        allow delete: if isUserAuthenticated() && (isAdmin(request.auth.uid) || (isTeacher(request.auth.uid) && isTeacherAssignedToClass(request.auth.uid, classId)));
      }
    }

    // APP SETTINGS (/app_settings/general)
    match /app_settings/general {
      allow read: if true;
      allow write: if isUserAuthenticated() && isAdmin(request.auth.uid);
    }

    // HALL OF FAME (/hall_of_fame_items/{itemId})
    match /hall_of_fame_items/{itemId} {
      allow read: if true;
      allow list: if true;
      allow create, update, delete: if isUserAuthenticated() && isAdmin(request.auth.uid);
    }
  }
}

    