
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    // General function to check a user's role from the 'users' collection
    function isUserRole(userId, targetRole) {
      let userDocPath = /databases/$(database)/documents/users/$(userId);
      return isAuthenticated() && exists(userDocPath) && get(userDocPath).data.role == targetRole;
    }

    function isAdmin(userId) {
      return isUserRole(userId, 'Admin');
    }

    function isTeacher(userId) {
      return isUserRole(userId, 'Teacher');
    }

    function isStudent(userId) {
      return isUserRole(userId, 'Student');
    }

    // Checks if the requesting user is the owner of a specific student document
    // by comparing their auth.uid with the authUid field in the student document.
    function isOwnerOfStudentProfile(studentId) {
      let studentDocPath = /databases/$(database)/documents/students/$(studentId);
      return isAuthenticated() &&
             exists(studentDocPath) &&
             get(studentDocPath).data.authUid == request.auth.uid;
    }

    // Match rules for specific collections

    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin(request.auth.uid));
      allow write: if isAuthenticated() && isAdmin(request.auth.uid); // Only admins can create/update/delete user role docs
      allow create: if isAuthenticated() && isAdmin(request.auth.uid);
      allow update: if isAuthenticated() && isAdmin(request.auth.uid);
      allow delete: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    match /students/{studentId} {
      allow read: if isAuthenticated() && (isOwnerOfStudentProfile(studentId) || isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
      allow create: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid));
      // Teachers/Admins can update any student. Students can update their own profile (if we add more granular rules later for specific fields).
      allow update: if isAuthenticated() && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid) || isOwnerOfStudentProfile(studentId) );
      allow delete: if isAuthenticated() && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid)); // Or just isAdmin based on policy
    }

    match /teachers/{teacherId} {
      // A teacher can read their own profile, Admins can read any teacher profile.
      allow read: if isAuthenticated() && ((isTeacher(request.auth.uid) && request.auth.uid == teacherId) || isAdmin(request.auth.uid));
      // Only Admins can create, update, or delete teacher profiles.
      allow write: if isAuthenticated() && isAdmin(request.auth.uid);
      allow create: if isAuthenticated() && isAdmin(request.auth.uid);
      allow update: if isAuthenticated() && isAdmin(request.auth.uid);
      allow delete: if isAuthenticated() && isAdmin(request.auth.uid);
    }

    match /app_settings/{settingId} {
      allow read: if isAuthenticated(); // All authenticated users can read app settings (e.g., app name, logo for UI)
      allow write: if isAuthenticated() && isAdmin(request.auth.uid); // Only admins can change settings
    }

    match /hall_of_fame_items/{itemId} {
      allow read: if true; // Hall of Fame is public
      allow write: if isAuthenticated() && isAdmin(request.auth.uid); // Only admins can manage Hall of Fame
    }
  }
}
