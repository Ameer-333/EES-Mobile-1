
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData(userId) {
      // Ensures that we only attempt to get data if userId is valid
      if (userId == null) {
        return null;
      }
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isUserRole(userId, targetRole) {
      let userData = getUserData(userId);
      return userData != null && userData.role == targetRole;
    }

    function isAdmin(userId) {
      return isAuthenticated() && isUserRole(userId, 'Admin');
    }

    function isTeacher(userId) {
      return isAuthenticated() && isUserRole(userId, 'Teacher');
    }

    function isStudent(userId) {
      return isAuthenticated() && isUserRole(userId, 'Student');
    }

    // Checks if a teacher is assigned to a specific class (any section/subject/group within it)
    function isTeacherAssignedToClass(teacherAssignments, targetClassId) {
      return isAuthenticated() &&
             teacherAssignments != null &&
             teacherAssignments is list &&
             teacherAssignments.filter(assignment =>
               assignment.classId == targetClassId
             ).size() > 0;
    }

    // Checks if a teacher is assigned to a specific student
    function isTeacherAssignedToStudent(teacherAssignments, studentClassId, studentSectionId, studentGroupId) {
      return isAuthenticated() &&
             teacherAssignments != null &&
             teacherAssignments is list &&
             teacherAssignments.filter(assignment =>
               assignment.classId == studentClassId &&
               // Handle optional sectionId:
               // True if assignment has no sectionId (applies to all sections)
               // OR assignment.sectionId is empty (applies to all sections)
               // OR assignment.sectionId matches student's sectionId
               ( ( !('sectionId' in assignment) || assignment.sectionId == '' ) ||
                 ( 'sectionId' in assignment && assignment.sectionId == studentSectionId )
               ) &&
               // Handle optional groupId:
               // True if assignment has no groupId (applies to all groups or not group-specific)
               // OR assignment.groupId is empty
               // OR assignment.groupId matches student's groupId
               ( ( !('groupId' in assignment) || assignment.groupId == '' ) ||
                 ( 'groupId' in assignment && assignment.groupId == studentGroupId )
               )
             ).size() > 0;
    }

    // --- Firestore Rules ---

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin(request.auth.uid));
      allow list: if isAdmin(request.auth.uid);
      allow create: if isAdmin(request.auth.uid);
      allow update: if isAdmin(request.auth.uid) ||
                       (request.auth.uid == userId &&
                        request.resource.data.keys().hasOnly(['name', 'displayName', 'photoURL', 'lastLogin', 'email']) // Allow email update by user for now
                       );
      allow delete: if isAdmin(request.auth.uid);
    }

    // Teachers HR profiles collection
    match /teachers/{teacherId} {
      allow read: if isAuthenticated() && (request.auth.uid == teacherId || isAdmin(request.auth.uid));
      allow list: if isAdmin(request.auth.uid);
      allow create, update, delete: if isAdmin(request.auth.uid);
    }

    // Root for student data, organized by class
    match /student_data_by_class/{classId} {
      // Rules for the class document itself (e.g., /student_data_by_class/LKG)
      allow read: if isAdmin(request.auth.uid) ||
                     (isTeacher(request.auth.uid) && isTeacherAssignedToClass(getUserData(request.auth.uid).assignments, classId));
      allow list: if isAdmin(request.auth.uid);
      allow create, update, delete: if isAdmin(request.auth.uid);

      // Profiles subcollection under each class
      match /profiles/{studentProfileId} {
        // Aliases for convenience
        let studentResourceData = resource.data; // Existing data for read/update/delete
        let studentRequestData = request.resource.data; // Incoming data for create/update
        let currentUserId = request.auth.uid;
        let currentUserData = getUserData(currentUserId);

        allow read: if isAuthenticated() && (
                       isAdmin(currentUserId) ||
                       (isStudent(currentUserId) &&
                         currentUserData.classId == classId &&
                         currentUserData.studentProfileId == studentProfileId &&
                         studentResourceData.authUid == currentUserId
                       ) ||
                       (isTeacher(currentUserId) &&
                         isTeacherAssignedToStudent(
                           currentUserData.assignments,
                           classId,
                           studentResourceData.sectionId,
                           studentResourceData.groupId
                         )
                       )
                     );

        allow list: if isAuthenticated() && (
                       isAdmin(currentUserId) ||
                       (isTeacher(currentUserId) && isTeacherAssignedToClass(currentUserData.assignments, classId))
                     );

        allow create: if isAuthenticated() &&
                         (isAdmin(currentUserId) ||
                           (isTeacher(currentUserId) && isTeacherAssignedToClass(currentUserData.assignments, classId))
                         ) &&
                         studentRequestData.classId == classId &&
                         studentRequestData.authUid != null;

        allow update: if isAuthenticated() &&
                         (isAdmin(currentUserId) ||
                           (isTeacher(currentUserId) &&
                             isTeacherAssignedToStudent(
                               currentUserData.assignments,
                               classId, // Path classId which is student's current classId
                               studentResourceData.sectionId, // Existing student's section
                               studentResourceData.groupId    // Existing student's group
                             )
                           )
                         ) &&
                         studentRequestData.authUid == studentResourceData.authUid; // Prevent changing authUid

        allow delete: if isAdmin(currentUserId);
      }
    }

    // App Settings collection
    match /app_settings/{settingId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated();
      allow create, update, delete: if isAdmin(request.auth.uid);
    }

    // Hall of Fame collection
    match /hall_of_fame_items/{itemId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated();
      allow create, update, delete: if isAdmin(request.auth.uid);
    }
  }
}
